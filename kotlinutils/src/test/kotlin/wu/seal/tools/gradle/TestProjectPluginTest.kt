/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package wu.seal.tools.gradle

import org.gradle.testfixtures.ProjectBuilder
import java.io.File
import kotlin.test.Test
import kotlin.test.assertNotNull

/**
 * unit test for the 'io.github.wuseal.utils' plugin.
 */
class TestProjectPluginTest {
    class TestModel(val name: String)
    @Test fun `plugin apply`() {
        // Create a test project and apply the plugin
        val project = ProjectBuilder.builder().build()
        project.plugins.apply("io.github.wuseal.utils")

        // Verify can find method fromJson
        assertNotNull(project.extensions.findByName("fromJson"))
        // verify can find method toJson
        assertNotNull(project.extensions.findByName("toJson"))
        // verify can find method runCommand
        assertNotNull(project.extensions.findByName("runCommand"))
        // verify can find method evalBash
        assertNotNull(project.extensions.findByName("evalBash"))

        //verify runCommand
        val result = "echo hello".runCommand()
        assert(result.exitValue() == 0)

        //verify evalBash
        val result2 = "echo hello".evalBash()
        assert(result2.getOrNull() == "hello")

        //verify fromJson
        val result3 = "{\"name\":\"wuseal\"}".fromJson(TestModel::class.java)
        assert(result3.name == "wuseal")

        //verify toJson
        val result4 = TestModel("wuseal").toJson()
        //print result4
        assert(result4 == """
            {
              "name": "wuseal"
            }
        """.trimIndent())

        //verify evalBash with processConfig
        val result5 = "pwd".evalBash {
            directory(File(System.getProperty("user.home")))
        }
        assert(result5.getOrNull() == System.getProperty("user.home"))
    }

    //Test BashResult
    @Test fun testBashResult() {
        val result = "echo hello".evalBash()
        assert(result.getOrNull() == "hello")
        assert(result.getOrThrow() == "hello")
        assert(result.sout() == "hello")
        assert(result.serr() == "")
        assert(result.toString() == """
            exitCode: 0
            stdout: hello
            stderr: 
        """.trimIndent())
    }

    @Test
    fun testBashResultWithError() {
        //invoke bash command with error
        val result = "ls /not_exist_dir".evalBash()

        assert(result.getOrNull() == null)
        assert(result.exceptionOrNull()?.message?.endsWith("No such file or directory") == true)
    }

    // Test runCommand result
    @Test fun testRunCommandResult() {
        val result = "echo hello".runCommand()
        assert(result.exitValue() == 0)
    }

    //Test runCommand with error
    @Test fun testRunCommandResultWithError() {
        val result = "ls /not_exist_dir".runCommand()
        assert(result.exitValue() != 0)
        //test throwIfError
        assert(kotlin.runCatching { result.throwIfError()}
            .exceptionOrNull() is RuntimeException)
    }
}
